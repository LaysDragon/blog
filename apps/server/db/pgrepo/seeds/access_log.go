// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeds

import (
	"context"
	"fmt"
	"math"
	"strconv"
	"time"

	models "github.com/LaysDragon/blog/apps/server/db/pgrepo/models"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
)

var (
	accessLogColumnsWithDefault = []string{"id", "created_at", "user_id"}
	accessLogDBTypes            = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UserID`: `integer`, `Method`: `text`}
)

func defaultAccessLogForeignKeySetter(i int, o *models.AccessLog, allAccounts models.AccountSlice) error {
	if len(allAccounts) > 0 {
		// set account
		AccountKey := int(math.Mod(float64(i), float64(len(allAccounts))))
		account := allAccounts[AccountKey]

		queries.Assign(&o.UserID, account.ID)

	}
	return nil
}

// defaultRandomAccessLog creates a random model.AccessLog
// Used when RandomAccessLog is not set in the Seeder
func defaultRandomAccessLog() (*models.AccessLog, error) {
	o := &models.AccessLog{}
	seed := randomize.NewSeed()
	err := randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...)

	return o, err
}

func (s Seeder) seedAccessLogs(ctx context.Context, exec boil.ContextExecutor) error {
	fmt.Println("Adding AccessLogs")
	AccessLogsToAdd := s.MinAccessLogsToSeed

	randomFunc := s.RandomAccessLog
	if randomFunc == nil {
		randomFunc = defaultRandomAccessLog
	}

	fkFunc := s.AccessLogForeignKeySetter
	if fkFunc == nil {
		fkFunc = defaultAccessLogForeignKeySetter
	}

	accounts, err := models.Accounts().All(ctx, exec)
	if err != nil {
		return fmt.Errorf("error getting accounts: %w", err)
	}

	if s.UserAccessLogsPerAccount*len(accounts) > AccessLogsToAdd {
		AccessLogsToAdd = s.UserAccessLogsPerAccount * len(accounts)
	}

	for i := 0; i < AccessLogsToAdd; i++ {
		// create model
		o, err := randomFunc()
		if err != nil {
			return fmt.Errorf("unable to get Random AccessLog: %w", err)
		}

		// Set foreign keys
		err = fkFunc(i, o, accounts)
		if err != nil {
			return fmt.Errorf("unable to get set foreign keys for AccessLog: %w", err)
		}

		// insert model
		if err := o.Insert(ctx, exec, boil.Infer()); err != nil {
			return fmt.Errorf("unable to insert AccessLog: %w", err)
		}
	}

	// run afterAdd
	if s.AfterAccessLogsAdded != nil {
		if err := s.AfterAccessLogsAdded(ctx); err != nil {
			return fmt.Errorf("error running AfterAccessLogsAdded: %w", err)
		}
	}

	fmt.Println("Finished adding AccessLogs")
	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ = math.E
var _ = queries.Query{}

// This is to force strconv to be used. Without it, it causes an error because strconv is imported by ALL the drivers
var _ = strconv.IntSize

// accessLog is here to prevent erros due to driver "BasedOnType" imports.
type accessLog struct {
	ID        int
	CreatedAt time.Time
	UserID    null.Int
	Method    string
}
