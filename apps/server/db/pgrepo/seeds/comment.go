// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeds

import (
	"context"
	"fmt"
	"math"
	"strconv"
	"time"

	models "github.com/LaysDragon/blog/apps/server/db/pgrepo/models"
	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
)

var (
	commentColumnsWithDefault = []string{"id", "created_at"}
	commentDBTypes            = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `PostID`: `integer`, `Email`: `character varying`, `Name`: `character varying`, `Content`: `text`}
)

func defaultCommentForeignKeySetter(i int, o *models.Comment, allPosts models.PostSlice) error {
	if len(allPosts) > 0 {
		// set post
		PostKey := int(math.Mod(float64(i), float64(len(allPosts))))
		post := allPosts[PostKey]

		o.PostID = post.ID

	}
	return nil
}

// defaultRandomComment creates a random model.Comment
// Used when RandomComment is not set in the Seeder
func defaultRandomComment() (*models.Comment, error) {
	o := &models.Comment{}
	seed := randomize.NewSeed()
	err := randomize.Struct(seed, o, commentDBTypes, true, commentColumnsWithDefault...)

	return o, err
}

func (s Seeder) seedComments(ctx context.Context, exec boil.ContextExecutor) error {
	fmt.Println("Adding Comments")
	CommentsToAdd := s.MinCommentsToSeed

	randomFunc := s.RandomComment
	if randomFunc == nil {
		randomFunc = defaultRandomComment
	}

	fkFunc := s.CommentForeignKeySetter
	if fkFunc == nil {
		fkFunc = defaultCommentForeignKeySetter
	}

	posts, err := models.Posts().All(ctx, exec)
	if err != nil {
		return fmt.Errorf("error getting posts: %w", err)
	}

	if s.CommentsPerPost*len(posts) > CommentsToAdd {
		CommentsToAdd = s.CommentsPerPost * len(posts)
	}

	for i := 0; i < CommentsToAdd; i++ {
		// create model
		o, err := randomFunc()
		if err != nil {
			return fmt.Errorf("unable to get Random Comment: %w", err)
		}

		// Set foreign keys
		err = fkFunc(i, o, posts)
		if err != nil {
			return fmt.Errorf("unable to get set foreign keys for Comment: %w", err)
		}

		// insert model
		if err := o.Insert(ctx, exec, boil.Infer()); err != nil {
			return fmt.Errorf("unable to insert Comment: %w", err)
		}
	}

	// run afterAdd
	if s.AfterCommentsAdded != nil {
		if err := s.AfterCommentsAdded(ctx); err != nil {
			return fmt.Errorf("error running AfterCommentsAdded: %w", err)
		}
	}

	fmt.Println("Finished adding Comments")
	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ = math.E
var _ = queries.Query{}

// This is to force strconv to be used. Without it, it causes an error because strconv is imported by ALL the drivers
var _ = strconv.IntSize

// comment is here to prevent erros due to driver "BasedOnType" imports.
type comment struct {
	ID        int
	CreatedAt time.Time
	PostID    int
	Email     string
	Name      string
	Content   string
}
