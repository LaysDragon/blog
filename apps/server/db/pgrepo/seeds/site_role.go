// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeds

import (
	"context"
	"fmt"
	"math"
	"strconv"
	"time"

	models "github.com/LaysDragon/blog/apps/server/db/pgrepo/models"
	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
)

var (
	siteRoleColumnsWithDefault = []string{"created_at", "updated_at"}
	siteRoleDBTypes            = map[string]string{`CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `AccountID`: `integer`, `SiteID`: `integer`, `Role`: `character varying`}
)

func defaultSiteRoleForeignKeySetter(i int, o *models.SiteRole, allAccounts models.AccountSlice, allSites models.SiteSlice) error {
	if len(allAccounts) > 0 {
		// set account
		AccountKey := int(math.Mod(float64(i), float64(len(allAccounts))))
		account := allAccounts[AccountKey]

		o.AccountID = account.ID

	}
	if len(allSites) > 0 {
		// set site
		SiteKey := int(math.Mod(float64(i), float64(len(allSites))))
		site := allSites[SiteKey]

		o.SiteID = site.ID

	}
	return nil
}

// defaultRandomSiteRole creates a random model.SiteRole
// Used when RandomSiteRole is not set in the Seeder
func defaultRandomSiteRole() (*models.SiteRole, error) {
	o := &models.SiteRole{}
	seed := randomize.NewSeed()
	err := randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...)

	return o, err
}

func (s Seeder) seedSiteRoles(ctx context.Context, exec boil.ContextExecutor) error {
	fmt.Println("Adding SiteRoles")
	SiteRolesToAdd := s.MinSiteRolesToSeed

	randomFunc := s.RandomSiteRole
	if randomFunc == nil {
		randomFunc = defaultRandomSiteRole
	}

	fkFunc := s.SiteRoleForeignKeySetter
	if fkFunc == nil {
		fkFunc = defaultSiteRoleForeignKeySetter
	}

	accounts, err := models.Accounts().All(ctx, exec)
	if err != nil {
		return fmt.Errorf("error getting accounts: %w", err)
	}
	sites, err := models.Sites().All(ctx, exec)
	if err != nil {
		return fmt.Errorf("error getting sites: %w", err)
	}

	if s.SiteRolesPerAccount*len(accounts) > SiteRolesToAdd {
		SiteRolesToAdd = s.SiteRolesPerAccount * len(accounts)
	}

	if s.SiteRolesPerSite*len(sites) > SiteRolesToAdd {
		SiteRolesToAdd = s.SiteRolesPerSite * len(sites)
	}

	for i := 0; i < SiteRolesToAdd; i++ {
		// create model
		o, err := randomFunc()
		if err != nil {
			return fmt.Errorf("unable to get Random SiteRole: %w", err)
		}

		// Set foreign keys
		err = fkFunc(i, o, accounts, sites)
		if err != nil {
			return fmt.Errorf("unable to get set foreign keys for SiteRole: %w", err)
		}

		// insert model
		if err := o.Insert(ctx, exec, boil.Infer()); err != nil {
			return fmt.Errorf("unable to insert SiteRole: %w", err)
		}
	}

	// run afterAdd
	if s.AfterSiteRolesAdded != nil {
		if err := s.AfterSiteRolesAdded(ctx); err != nil {
			return fmt.Errorf("error running AfterSiteRolesAdded: %w", err)
		}
	}

	fmt.Println("Finished adding SiteRoles")
	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ = math.E
var _ = queries.Query{}

// This is to force strconv to be used. Without it, it causes an error because strconv is imported by ALL the drivers
var _ = strconv.IntSize

// siteRole is here to prevent erros due to driver "BasedOnType" imports.
type siteRole struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	AccountID int
	SiteID    int
	Role      string
}
