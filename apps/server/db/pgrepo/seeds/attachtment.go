// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeds

import (
	"context"
	"fmt"
	"math"
	"strconv"
	"time"

	models "github.com/LaysDragon/blog/apps/server/db/pgrepo/models"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
)

var (
	attachtmentColumnsWithDefault = []string{"id", "created_at", "updated_at", "deleted_at"}
	attachtmentDBTypes            = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `SiteID`: `integer`, `RelatedID`: `integer`, `URL`: `text`}
)

func defaultAttachtmentForeignKeySetter(i int, o *models.Attachtment, allPosts models.PostSlice, allSites models.SiteSlice) error {
	if len(allPosts) > 0 {
		// set post
		PostKey := int(math.Mod(float64(i), float64(len(allPosts))))
		post := allPosts[PostKey]

		o.RelatedID = post.ID

	}
	if len(allSites) > 0 {
		// set site
		SiteKey := int(math.Mod(float64(i), float64(len(allSites))))
		site := allSites[SiteKey]

		o.SiteID = site.ID

	}
	return nil
}

// defaultRandomAttachtment creates a random model.Attachtment
// Used when RandomAttachtment is not set in the Seeder
func defaultRandomAttachtment() (*models.Attachtment, error) {
	o := &models.Attachtment{}
	seed := randomize.NewSeed()
	err := randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...)

	return o, err
}

func (s Seeder) seedAttachtments(ctx context.Context, exec boil.ContextExecutor) error {
	fmt.Println("Adding Attachtments")
	AttachtmentsToAdd := s.MinAttachtmentsToSeed

	randomFunc := s.RandomAttachtment
	if randomFunc == nil {
		randomFunc = defaultRandomAttachtment
	}

	fkFunc := s.AttachtmentForeignKeySetter
	if fkFunc == nil {
		fkFunc = defaultAttachtmentForeignKeySetter
	}

	posts, err := models.Posts().All(ctx, exec)
	if err != nil {
		return fmt.Errorf("error getting posts: %w", err)
	}
	sites, err := models.Sites().All(ctx, exec)
	if err != nil {
		return fmt.Errorf("error getting sites: %w", err)
	}

	if s.RelatedAttachtmentsPerPost*len(posts) > AttachtmentsToAdd {
		AttachtmentsToAdd = s.RelatedAttachtmentsPerPost * len(posts)
	}

	if s.AttachtmentsPerSite*len(sites) > AttachtmentsToAdd {
		AttachtmentsToAdd = s.AttachtmentsPerSite * len(sites)
	}

	for i := 0; i < AttachtmentsToAdd; i++ {
		// create model
		o, err := randomFunc()
		if err != nil {
			return fmt.Errorf("unable to get Random Attachtment: %w", err)
		}

		// Set foreign keys
		err = fkFunc(i, o, posts, sites)
		if err != nil {
			return fmt.Errorf("unable to get set foreign keys for Attachtment: %w", err)
		}

		// insert model
		if err := o.Insert(ctx, exec, boil.Infer()); err != nil {
			return fmt.Errorf("unable to insert Attachtment: %w", err)
		}
	}

	// run afterAdd
	if s.AfterAttachtmentsAdded != nil {
		if err := s.AfterAttachtmentsAdded(ctx); err != nil {
			return fmt.Errorf("error running AfterAttachtmentsAdded: %w", err)
		}
	}

	fmt.Println("Finished adding Attachtments")
	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ = math.E
var _ = queries.Query{}

// This is to force strconv to be used. Without it, it causes an error because strconv is imported by ALL the drivers
var _ = strconv.IntSize

// attachtment is here to prevent erros due to driver "BasedOnType" imports.
type attachtment struct {
	ID        int
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt null.Time
	SiteID    int
	RelatedID int
	URL       string
}
