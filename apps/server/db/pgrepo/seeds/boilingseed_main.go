// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeds

import (
	"context"
	"fmt"
	"math/rand"
	"sync"
	"time"

	models "github.com/LaysDragon/blog/apps/server/db/pgrepo/models"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type Seeder struct {
	// The minimum number of AccessLogs to seed
	MinAccessLogsToSeed int
	// RandomAccessLog creates a random models.AccessLog
	// It does not need to add relationships.
	// If one is not set, defaultRandomAccessLog() is used
	RandomAccessLog func() (*models.AccessLog, error)
	// AfterAccessLogsAdded runs after all AccessLogs are added
	AfterAccessLogsAdded func(ctx context.Context) error
	// defaultAccessLogForeignKeySetter() is used if this is not set
	// setting this means that the xxxPerxxx settings cannot be guaranteed
	AccessLogForeignKeySetter func(i int, o *models.AccessLog, allAccounts models.AccountSlice) error

	// The minimum number of Accounts to seed
	MinAccountsToSeed int
	// RandomAccount creates a random models.Account
	// It does not need to add relationships.
	// If one is not set, defaultRandomAccount() is used
	RandomAccount func() (*models.Account, error)
	// AfterAccountsAdded runs after all Accounts are added
	AfterAccountsAdded func(ctx context.Context) error

	// The minimum number of Attachtments to seed
	MinAttachtmentsToSeed int
	// RandomAttachtment creates a random models.Attachtment
	// It does not need to add relationships.
	// If one is not set, defaultRandomAttachtment() is used
	RandomAttachtment func() (*models.Attachtment, error)
	// AfterAttachtmentsAdded runs after all Attachtments are added
	AfterAttachtmentsAdded func(ctx context.Context) error
	// defaultAttachtmentForeignKeySetter() is used if this is not set
	// setting this means that the xxxPerxxx settings cannot be guaranteed
	AttachtmentForeignKeySetter func(i int, o *models.Attachtment, allPosts models.PostSlice, allSites models.SiteSlice) error

	// The minimum number of Comments to seed
	MinCommentsToSeed int
	// RandomComment creates a random models.Comment
	// It does not need to add relationships.
	// If one is not set, defaultRandomComment() is used
	RandomComment func() (*models.Comment, error)
	// AfterCommentsAdded runs after all Comments are added
	AfterCommentsAdded func(ctx context.Context) error
	// defaultCommentForeignKeySetter() is used if this is not set
	// setting this means that the xxxPerxxx settings cannot be guaranteed
	CommentForeignKeySetter func(i int, o *models.Comment, allPosts models.PostSlice) error

	// The minimum number of Posts to seed
	MinPostsToSeed int
	// RandomPost creates a random models.Post
	// It does not need to add relationships.
	// If one is not set, defaultRandomPost() is used
	RandomPost func() (*models.Post, error)
	// AfterPostsAdded runs after all Posts are added
	AfterPostsAdded func(ctx context.Context) error
	// defaultPostForeignKeySetter() is used if this is not set
	// setting this means that the xxxPerxxx settings cannot be guaranteed
	PostForeignKeySetter func(i int, o *models.Post, allSites models.SiteSlice) error

	// The minimum number of Sites to seed
	MinSitesToSeed int
	// RandomSite creates a random models.Site
	// It does not need to add relationships.
	// If one is not set, defaultRandomSite() is used
	RandomSite func() (*models.Site, error)
	// AfterSitesAdded runs after all Sites are added
	AfterSitesAdded func(ctx context.Context) error

	// The minimum number of SiteRoles to seed
	MinSiteRolesToSeed int
	// RandomSiteRole creates a random models.SiteRole
	// It does not need to add relationships.
	// If one is not set, defaultRandomSiteRole() is used
	RandomSiteRole func() (*models.SiteRole, error)
	// AfterSiteRolesAdded runs after all SiteRoles are added
	AfterSiteRolesAdded func(ctx context.Context) error
	// defaultSiteRoleForeignKeySetter() is used if this is not set
	// setting this means that the xxxPerxxx settings cannot be guaranteed
	SiteRoleForeignKeySetter func(i int, o *models.SiteRole, allAccounts models.AccountSlice, allSites models.SiteSlice) error

	UserAccessLogsPerAccount   int
	SiteRolesPerAccount        int
	RelatedAttachtmentsPerPost int
	CommentsPerPost            int
	AttachtmentsPerSite        int
	PostsPerSite               int
	SiteRolesPerSite           int

	// Number of times to retry getting a unique relationship in many-to-many relationships
	Retries int
}

func (s Seeder) Run(ctx context.Context, exec boil.ContextExecutor) error {
	rand.Seed(time.Now().Unix())
	var wg sync.WaitGroup

	ctxMain, cancelMain := context.WithCancel(ctx)
	defer cancelMain()

	ctxAccessLogs, cancelAccessLogs := context.WithCancel(ctxMain)
	ctxAccounts, cancelAccounts := context.WithCancel(ctxMain)
	ctxAttachtments, cancelAttachtments := context.WithCancel(ctxMain)
	ctxComments, cancelComments := context.WithCancel(ctxMain)
	ctxPosts, cancelPosts := context.WithCancel(ctxMain)
	ctxSites, cancelSites := context.WithCancel(ctxMain)
	ctxSiteRoles, cancelSiteRoles := context.WithCancel(ctxMain)

	errChan := make(chan error, 7)

	// RunAccessLogsSeed()
	wg.Add(1)
	go func() {
		defer cancelAccessLogs()
		defer wg.Done()
		<-ctxAccounts.Done()

		if err := s.seedAccessLogs(ctxAccessLogs, exec); err != nil {
			errChan <- err
			cancelMain()
		}
	}()

	// RunAccountsSeed()
	wg.Add(1)
	go func() {
		defer cancelAccounts()
		defer wg.Done()

		if err := s.seedAccounts(ctxAccounts, exec); err != nil {
			errChan <- err
			cancelMain()
		}
	}()

	// RunAttachtmentsSeed()
	wg.Add(1)
	go func() {
		defer cancelAttachtments()
		defer wg.Done()
		<-ctxPosts.Done()
		<-ctxSites.Done()

		if err := s.seedAttachtments(ctxAttachtments, exec); err != nil {
			errChan <- err
			cancelMain()
		}
	}()

	// RunCommentsSeed()
	wg.Add(1)
	go func() {
		defer cancelComments()
		defer wg.Done()
		<-ctxPosts.Done()

		if err := s.seedComments(ctxComments, exec); err != nil {
			errChan <- err
			cancelMain()
		}
	}()

	// RunPostsSeed()
	wg.Add(1)
	go func() {
		defer cancelPosts()
		defer wg.Done()
		<-ctxSites.Done()

		if err := s.seedPosts(ctxPosts, exec); err != nil {
			errChan <- err
			cancelMain()
		}
	}()

	// RunSitesSeed()
	wg.Add(1)
	go func() {
		defer cancelSites()
		defer wg.Done()

		if err := s.seedSites(ctxSites, exec); err != nil {
			errChan <- err
			cancelMain()
		}
	}()

	// RunSiteRolesSeed()
	wg.Add(1)
	go func() {
		defer cancelSiteRoles()
		defer wg.Done()
		<-ctxAccounts.Done()
		<-ctxSites.Done()

		if err := s.seedSiteRoles(ctxSiteRoles, exec); err != nil {
			errChan <- err
			cancelMain()
		}
	}()

	wg.Wait()

	close(errChan)
	err := <-errChan
	if err != nil {
		return err
	}

	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ fmt.Scanner
var _ = models.NewQuery()
