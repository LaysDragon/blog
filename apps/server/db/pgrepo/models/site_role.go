// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SiteRole is an object representing the database table.
type SiteRole struct {
	AccountID int    `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	SiteID    int    `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	Role      string `boil:"role" json:"role" toml:"role" yaml:"role"`

	R *siteRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L siteRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SiteRoleColumns = struct {
	AccountID string
	SiteID    string
	Role      string
}{
	AccountID: "account_id",
	SiteID:    "site_id",
	Role:      "role",
}

var SiteRoleTableColumns = struct {
	AccountID string
	SiteID    string
	Role      string
}{
	AccountID: "site_role.account_id",
	SiteID:    "site_role.site_id",
	Role:      "site_role.role",
}

// Generated where

var SiteRoleWhere = struct {
	AccountID whereHelperint
	SiteID    whereHelperint
	Role      whereHelperstring
}{
	AccountID: whereHelperint{field: "\"site_role\".\"account_id\""},
	SiteID:    whereHelperint{field: "\"site_role\".\"site_id\""},
	Role:      whereHelperstring{field: "\"site_role\".\"role\""},
}

// SiteRoleRels is where relationship names are stored.
var SiteRoleRels = struct {
	Account string
	Site    string
}{
	Account: "Account",
	Site:    "Site",
}

// siteRoleR is where relationships are stored.
type siteRoleR struct {
	Account *Account `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	Site    *Site    `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
}

// NewStruct creates a new relationship struct
func (*siteRoleR) NewStruct() *siteRoleR {
	return &siteRoleR{}
}

func (o *SiteRole) GetAccount() *Account {
	if o == nil {
		return nil
	}

	return o.R.GetAccount()
}

func (r *siteRoleR) GetAccount() *Account {
	if r == nil {
		return nil
	}

	return r.Account
}

func (o *SiteRole) GetSite() *Site {
	if o == nil {
		return nil
	}

	return o.R.GetSite()
}

func (r *siteRoleR) GetSite() *Site {
	if r == nil {
		return nil
	}

	return r.Site
}

// siteRoleL is where Load methods for each relationship are stored.
type siteRoleL struct{}

var (
	siteRoleAllColumns            = []string{"account_id", "site_id", "role"}
	siteRoleColumnsWithoutDefault = []string{"account_id", "site_id", "role"}
	siteRoleColumnsWithDefault    = []string{}
	siteRolePrimaryKeyColumns     = []string{"account_id", "site_id"}
	siteRoleGeneratedColumns      = []string{}
)

type (
	// SiteRoleSlice is an alias for a slice of pointers to SiteRole.
	// This should almost always be used instead of []SiteRole.
	SiteRoleSlice []*SiteRole
	// SiteRoleHook is the signature for custom SiteRole hook methods
	SiteRoleHook func(context.Context, boil.ContextExecutor, *SiteRole) error

	siteRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	siteRoleType                 = reflect.TypeOf(&SiteRole{})
	siteRoleMapping              = queries.MakeStructMapping(siteRoleType)
	siteRolePrimaryKeyMapping, _ = queries.BindMapping(siteRoleType, siteRoleMapping, siteRolePrimaryKeyColumns)
	siteRoleInsertCacheMut       sync.RWMutex
	siteRoleInsertCache          = make(map[string]insertCache)
	siteRoleUpdateCacheMut       sync.RWMutex
	siteRoleUpdateCache          = make(map[string]updateCache)
	siteRoleUpsertCacheMut       sync.RWMutex
	siteRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var siteRoleAfterSelectMu sync.Mutex
var siteRoleAfterSelectHooks []SiteRoleHook

var siteRoleBeforeInsertMu sync.Mutex
var siteRoleBeforeInsertHooks []SiteRoleHook
var siteRoleAfterInsertMu sync.Mutex
var siteRoleAfterInsertHooks []SiteRoleHook

var siteRoleBeforeUpdateMu sync.Mutex
var siteRoleBeforeUpdateHooks []SiteRoleHook
var siteRoleAfterUpdateMu sync.Mutex
var siteRoleAfterUpdateHooks []SiteRoleHook

var siteRoleBeforeDeleteMu sync.Mutex
var siteRoleBeforeDeleteHooks []SiteRoleHook
var siteRoleAfterDeleteMu sync.Mutex
var siteRoleAfterDeleteHooks []SiteRoleHook

var siteRoleBeforeUpsertMu sync.Mutex
var siteRoleBeforeUpsertHooks []SiteRoleHook
var siteRoleAfterUpsertMu sync.Mutex
var siteRoleAfterUpsertHooks []SiteRoleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SiteRole) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRoleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SiteRole) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRoleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SiteRole) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRoleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SiteRole) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRoleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SiteRole) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRoleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SiteRole) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRoleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SiteRole) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRoleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SiteRole) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRoleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SiteRole) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRoleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSiteRoleHook registers your hook function for all future operations.
func AddSiteRoleHook(hookPoint boil.HookPoint, siteRoleHook SiteRoleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		siteRoleAfterSelectMu.Lock()
		siteRoleAfterSelectHooks = append(siteRoleAfterSelectHooks, siteRoleHook)
		siteRoleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		siteRoleBeforeInsertMu.Lock()
		siteRoleBeforeInsertHooks = append(siteRoleBeforeInsertHooks, siteRoleHook)
		siteRoleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		siteRoleAfterInsertMu.Lock()
		siteRoleAfterInsertHooks = append(siteRoleAfterInsertHooks, siteRoleHook)
		siteRoleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		siteRoleBeforeUpdateMu.Lock()
		siteRoleBeforeUpdateHooks = append(siteRoleBeforeUpdateHooks, siteRoleHook)
		siteRoleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		siteRoleAfterUpdateMu.Lock()
		siteRoleAfterUpdateHooks = append(siteRoleAfterUpdateHooks, siteRoleHook)
		siteRoleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		siteRoleBeforeDeleteMu.Lock()
		siteRoleBeforeDeleteHooks = append(siteRoleBeforeDeleteHooks, siteRoleHook)
		siteRoleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		siteRoleAfterDeleteMu.Lock()
		siteRoleAfterDeleteHooks = append(siteRoleAfterDeleteHooks, siteRoleHook)
		siteRoleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		siteRoleBeforeUpsertMu.Lock()
		siteRoleBeforeUpsertHooks = append(siteRoleBeforeUpsertHooks, siteRoleHook)
		siteRoleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		siteRoleAfterUpsertMu.Lock()
		siteRoleAfterUpsertHooks = append(siteRoleAfterUpsertHooks, siteRoleHook)
		siteRoleAfterUpsertMu.Unlock()
	}
}

// One returns a single siteRole record from the query.
func (q siteRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SiteRole, error) {
	o := &SiteRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for site_role")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SiteRole records from the query.
func (q siteRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (SiteRoleSlice, error) {
	var o []*SiteRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SiteRole slice")
	}

	if len(siteRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SiteRole records in the query.
func (q siteRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count site_role rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q siteRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if site_role exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *SiteRole) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// Site pointed to by the foreign key.
func (o *SiteRole) Site(mods ...qm.QueryMod) siteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	return Sites(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteRoleL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteRole interface{}, mods queries.Applicator) error {
	var slice []*SiteRole
	var object *SiteRole

	if singular {
		var ok bool
		object, ok = maybeSiteRole.(*SiteRole)
		if !ok {
			object = new(SiteRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSiteRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSiteRole))
			}
		}
	} else {
		s, ok := maybeSiteRole.(*[]*SiteRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSiteRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSiteRole))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteRoleR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteRoleR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.SiteRoles = append(foreign.R.SiteRoles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.SiteRoles = append(foreign.R.SiteRoles, local)
				break
			}
		}
	}

	return nil
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteRoleL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteRole interface{}, mods queries.Applicator) error {
	var slice []*SiteRole
	var object *SiteRole

	if singular {
		var ok bool
		object, ok = maybeSiteRole.(*SiteRole)
		if !ok {
			object = new(SiteRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSiteRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSiteRole))
			}
		}
	} else {
		s, ok := maybeSiteRole.(*[]*SiteRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSiteRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSiteRole))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteRoleR{}
		}
		args[object.SiteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteRoleR{}
			}

			args[obj.SiteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`site`),
		qm.WhereIn(`site.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Site")
	}

	var resultSlice []*Site
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Site")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for site")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for site")
	}

	if len(siteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &siteR{}
		}
		foreign.R.SiteRoles = append(foreign.R.SiteRoles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SiteID == foreign.ID {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &siteR{}
				}
				foreign.R.SiteRoles = append(foreign.R.SiteRoles, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the siteRole to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.SiteRoles.
func (o *SiteRole) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"site_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, siteRolePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AccountID, o.SiteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &siteRoleR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			SiteRoles: SiteRoleSlice{o},
		}
	} else {
		related.R.SiteRoles = append(related.R.SiteRoles, o)
	}

	return nil
}

// SetSite of the siteRole to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.SiteRoles.
func (o *SiteRole) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Site) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"site_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 2, siteRolePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AccountID, o.SiteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SiteID = related.ID
	if o.R == nil {
		o.R = &siteRoleR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &siteR{
			SiteRoles: SiteRoleSlice{o},
		}
	} else {
		related.R.SiteRoles = append(related.R.SiteRoles, o)
	}

	return nil
}

// SiteRoles retrieves all the records using an executor.
func SiteRoles(mods ...qm.QueryMod) siteRoleQuery {
	mods = append(mods, qm.From("\"site_role\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"site_role\".*"})
	}

	return siteRoleQuery{q}
}

// FindSiteRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSiteRole(ctx context.Context, exec boil.ContextExecutor, accountID int, siteID int, selectCols ...string) (*SiteRole, error) {
	siteRoleObj := &SiteRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"site_role\" where \"account_id\"=$1 AND \"site_id\"=$2", sel,
	)

	q := queries.Raw(query, accountID, siteID)

	err := q.Bind(ctx, exec, siteRoleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from site_role")
	}

	if err = siteRoleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return siteRoleObj, err
	}

	return siteRoleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SiteRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no site_role provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	siteRoleInsertCacheMut.RLock()
	cache, cached := siteRoleInsertCache[key]
	siteRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			siteRoleAllColumns,
			siteRoleColumnsWithDefault,
			siteRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(siteRoleType, siteRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(siteRoleType, siteRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"site_role\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"site_role\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into site_role")
	}

	if !cached {
		siteRoleInsertCacheMut.Lock()
		siteRoleInsertCache[key] = cache
		siteRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SiteRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SiteRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	siteRoleUpdateCacheMut.RLock()
	cache, cached := siteRoleUpdateCache[key]
	siteRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			siteRoleAllColumns,
			siteRolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update site_role, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"site_role\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, siteRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(siteRoleType, siteRoleMapping, append(wl, siteRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update site_role row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for site_role")
	}

	if !cached {
		siteRoleUpdateCacheMut.Lock()
		siteRoleUpdateCache[key] = cache
		siteRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q siteRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for site_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for site_role")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SiteRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"site_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, siteRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in siteRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all siteRole")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SiteRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no site_role provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	siteRoleUpsertCacheMut.RLock()
	cache, cached := siteRoleUpsertCache[key]
	siteRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			siteRoleAllColumns,
			siteRoleColumnsWithDefault,
			siteRoleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			siteRoleAllColumns,
			siteRolePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert site_role, could not build update column list")
		}

		ret := strmangle.SetComplement(siteRoleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(siteRolePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert site_role, could not build conflict column list")
			}

			conflict = make([]string, len(siteRolePrimaryKeyColumns))
			copy(conflict, siteRolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"site_role\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(siteRoleType, siteRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(siteRoleType, siteRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert site_role")
	}

	if !cached {
		siteRoleUpsertCacheMut.Lock()
		siteRoleUpsertCache[key] = cache
		siteRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SiteRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SiteRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SiteRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), siteRolePrimaryKeyMapping)
	sql := "DELETE FROM \"site_role\" WHERE \"account_id\"=$1 AND \"site_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from site_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for site_role")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q siteRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no siteRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from site_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_role")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SiteRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(siteRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"site_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, siteRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from siteRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_role")
	}

	if len(siteRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SiteRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSiteRole(ctx, exec, o.AccountID, o.SiteID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SiteRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SiteRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"site_role\".* FROM \"site_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, siteRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SiteRoleSlice")
	}

	*o = slice

	return nil
}

// SiteRoleExists checks if the SiteRole row exists.
func SiteRoleExists(ctx context.Context, exec boil.ContextExecutor, accountID int, siteID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"site_role\" where \"account_id\"=$1 AND \"site_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accountID, siteID)
	}
	row := exec.QueryRowContext(ctx, sql, accountID, siteID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if site_role exists")
	}

	return exists, nil
}

// Exists checks if the SiteRole row exists.
func (o *SiteRole) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SiteRoleExists(ctx, exec, o.AccountID, o.SiteID)
}
