// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AccessLogs", testAccessLogs)
	t.Run("Accounts", testAccounts)
	t.Run("Attachtments", testAttachtments)
	t.Run("Comments", testComments)
	t.Run("Posts", testPosts)
	t.Run("Sites", testSites)
	t.Run("SiteRoles", testSiteRoles)
}

func TestDelete(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsDelete)
	t.Run("Accounts", testAccountsDelete)
	t.Run("Attachtments", testAttachtmentsDelete)
	t.Run("Comments", testCommentsDelete)
	t.Run("Posts", testPostsDelete)
	t.Run("Sites", testSitesDelete)
	t.Run("SiteRoles", testSiteRolesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsQueryDeleteAll)
	t.Run("Accounts", testAccountsQueryDeleteAll)
	t.Run("Attachtments", testAttachtmentsQueryDeleteAll)
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Posts", testPostsQueryDeleteAll)
	t.Run("Sites", testSitesQueryDeleteAll)
	t.Run("SiteRoles", testSiteRolesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsSliceDeleteAll)
	t.Run("Accounts", testAccountsSliceDeleteAll)
	t.Run("Attachtments", testAttachtmentsSliceDeleteAll)
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Posts", testPostsSliceDeleteAll)
	t.Run("Sites", testSitesSliceDeleteAll)
	t.Run("SiteRoles", testSiteRolesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsExists)
	t.Run("Accounts", testAccountsExists)
	t.Run("Attachtments", testAttachtmentsExists)
	t.Run("Comments", testCommentsExists)
	t.Run("Posts", testPostsExists)
	t.Run("Sites", testSitesExists)
	t.Run("SiteRoles", testSiteRolesExists)
}

func TestFind(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsFind)
	t.Run("Accounts", testAccountsFind)
	t.Run("Attachtments", testAttachtmentsFind)
	t.Run("Comments", testCommentsFind)
	t.Run("Posts", testPostsFind)
	t.Run("Sites", testSitesFind)
	t.Run("SiteRoles", testSiteRolesFind)
}

func TestBind(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsBind)
	t.Run("Accounts", testAccountsBind)
	t.Run("Attachtments", testAttachtmentsBind)
	t.Run("Comments", testCommentsBind)
	t.Run("Posts", testPostsBind)
	t.Run("Sites", testSitesBind)
	t.Run("SiteRoles", testSiteRolesBind)
}

func TestOne(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsOne)
	t.Run("Accounts", testAccountsOne)
	t.Run("Attachtments", testAttachtmentsOne)
	t.Run("Comments", testCommentsOne)
	t.Run("Posts", testPostsOne)
	t.Run("Sites", testSitesOne)
	t.Run("SiteRoles", testSiteRolesOne)
}

func TestAll(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsAll)
	t.Run("Accounts", testAccountsAll)
	t.Run("Attachtments", testAttachtmentsAll)
	t.Run("Comments", testCommentsAll)
	t.Run("Posts", testPostsAll)
	t.Run("Sites", testSitesAll)
	t.Run("SiteRoles", testSiteRolesAll)
}

func TestCount(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsCount)
	t.Run("Accounts", testAccountsCount)
	t.Run("Attachtments", testAttachtmentsCount)
	t.Run("Comments", testCommentsCount)
	t.Run("Posts", testPostsCount)
	t.Run("Sites", testSitesCount)
	t.Run("SiteRoles", testSiteRolesCount)
}

func TestHooks(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsHooks)
	t.Run("Accounts", testAccountsHooks)
	t.Run("Attachtments", testAttachtmentsHooks)
	t.Run("Comments", testCommentsHooks)
	t.Run("Posts", testPostsHooks)
	t.Run("Sites", testSitesHooks)
	t.Run("SiteRoles", testSiteRolesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsInsert)
	t.Run("AccessLogs", testAccessLogsInsertWhitelist)
	t.Run("Accounts", testAccountsInsert)
	t.Run("Accounts", testAccountsInsertWhitelist)
	t.Run("Attachtments", testAttachtmentsInsert)
	t.Run("Attachtments", testAttachtmentsInsertWhitelist)
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Posts", testPostsInsert)
	t.Run("Posts", testPostsInsertWhitelist)
	t.Run("Sites", testSitesInsert)
	t.Run("Sites", testSitesInsertWhitelist)
	t.Run("SiteRoles", testSiteRolesInsert)
	t.Run("SiteRoles", testSiteRolesInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsReload)
	t.Run("Accounts", testAccountsReload)
	t.Run("Attachtments", testAttachtmentsReload)
	t.Run("Comments", testCommentsReload)
	t.Run("Posts", testPostsReload)
	t.Run("Sites", testSitesReload)
	t.Run("SiteRoles", testSiteRolesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsReloadAll)
	t.Run("Accounts", testAccountsReloadAll)
	t.Run("Attachtments", testAttachtmentsReloadAll)
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Posts", testPostsReloadAll)
	t.Run("Sites", testSitesReloadAll)
	t.Run("SiteRoles", testSiteRolesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsSelect)
	t.Run("Accounts", testAccountsSelect)
	t.Run("Attachtments", testAttachtmentsSelect)
	t.Run("Comments", testCommentsSelect)
	t.Run("Posts", testPostsSelect)
	t.Run("Sites", testSitesSelect)
	t.Run("SiteRoles", testSiteRolesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsUpdate)
	t.Run("Accounts", testAccountsUpdate)
	t.Run("Attachtments", testAttachtmentsUpdate)
	t.Run("Comments", testCommentsUpdate)
	t.Run("Posts", testPostsUpdate)
	t.Run("Sites", testSitesUpdate)
	t.Run("SiteRoles", testSiteRolesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AccessLogs", testAccessLogsSliceUpdateAll)
	t.Run("Accounts", testAccountsSliceUpdateAll)
	t.Run("Attachtments", testAttachtmentsSliceUpdateAll)
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Posts", testPostsSliceUpdateAll)
	t.Run("Sites", testSitesSliceUpdateAll)
	t.Run("SiteRoles", testSiteRolesSliceUpdateAll)
}
