// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttachtments(t *testing.T) {
	t.Parallel()

	query := Attachtments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttachtmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttachtmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Attachtments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttachtmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttachtmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttachtmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttachtmentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Attachtment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttachtmentExists to return true, but got false.")
	}
}

func testAttachtmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attachtmentFound, err := FindAttachtment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attachtmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttachtmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Attachtments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttachtmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Attachtments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttachtmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attachtmentOne := &Attachtment{}
	attachtmentTwo := &Attachtment{}
	if err = randomize.Struct(seed, attachtmentOne, attachtmentDBTypes, false, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}
	if err = randomize.Struct(seed, attachtmentTwo, attachtmentDBTypes, false, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attachtmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attachtmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attachtments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttachtmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attachtmentOne := &Attachtment{}
	attachtmentTwo := &Attachtment{}
	if err = randomize.Struct(seed, attachtmentOne, attachtmentDBTypes, false, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}
	if err = randomize.Struct(seed, attachtmentTwo, attachtmentDBTypes, false, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attachtmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attachtmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attachtmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Attachtment) error {
	*o = Attachtment{}
	return nil
}

func attachtmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Attachtment) error {
	*o = Attachtment{}
	return nil
}

func attachtmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Attachtment) error {
	*o = Attachtment{}
	return nil
}

func attachtmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Attachtment) error {
	*o = Attachtment{}
	return nil
}

func attachtmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Attachtment) error {
	*o = Attachtment{}
	return nil
}

func attachtmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Attachtment) error {
	*o = Attachtment{}
	return nil
}

func attachtmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Attachtment) error {
	*o = Attachtment{}
	return nil
}

func attachtmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Attachtment) error {
	*o = Attachtment{}
	return nil
}

func attachtmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Attachtment) error {
	*o = Attachtment{}
	return nil
}

func testAttachtmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Attachtment{}
	o := &Attachtment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attachtmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Attachtment object: %s", err)
	}

	AddAttachtmentHook(boil.BeforeInsertHook, attachtmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attachtmentBeforeInsertHooks = []AttachtmentHook{}

	AddAttachtmentHook(boil.AfterInsertHook, attachtmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attachtmentAfterInsertHooks = []AttachtmentHook{}

	AddAttachtmentHook(boil.AfterSelectHook, attachtmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attachtmentAfterSelectHooks = []AttachtmentHook{}

	AddAttachtmentHook(boil.BeforeUpdateHook, attachtmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attachtmentBeforeUpdateHooks = []AttachtmentHook{}

	AddAttachtmentHook(boil.AfterUpdateHook, attachtmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attachtmentAfterUpdateHooks = []AttachtmentHook{}

	AddAttachtmentHook(boil.BeforeDeleteHook, attachtmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attachtmentBeforeDeleteHooks = []AttachtmentHook{}

	AddAttachtmentHook(boil.AfterDeleteHook, attachtmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attachtmentAfterDeleteHooks = []AttachtmentHook{}

	AddAttachtmentHook(boil.BeforeUpsertHook, attachtmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attachtmentBeforeUpsertHooks = []AttachtmentHook{}

	AddAttachtmentHook(boil.AfterUpsertHook, attachtmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attachtmentAfterUpsertHooks = []AttachtmentHook{}
}

func testAttachtmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttachtmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(attachtmentPrimaryKeyColumns, attachtmentColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttachtmentToOnePostUsingRelated(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Attachtment
	var foreign Post

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, attachtmentDBTypes, false, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, postDBTypes, false, postColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Post struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RelatedID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Related().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPostHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Post) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AttachtmentSlice{&local}
	if err = local.L.LoadRelated(ctx, tx, false, (*[]*Attachtment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Related == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Related = nil
	if err = local.L.LoadRelated(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Related == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAttachtmentToOneSiteUsingSite(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Attachtment
	var foreign Site

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, attachtmentDBTypes, false, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SiteID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Site().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddSiteHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Site) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AttachtmentSlice{&local}
	if err = local.L.LoadSite(ctx, tx, false, (*[]*Attachtment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Site == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Site = nil
	if err = local.L.LoadSite(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Site == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAttachtmentToOneSetOpPostUsingRelated(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attachtment
	var b, c Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attachtmentDBTypes, false, strmangle.SetComplement(attachtmentPrimaryKeyColumns, attachtmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Post{&b, &c} {
		err = a.SetRelated(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Related != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RelatedAttachtments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RelatedID != x.ID {
			t.Error("foreign key was wrong value", a.RelatedID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RelatedID))
		reflect.Indirect(reflect.ValueOf(&a.RelatedID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RelatedID != x.ID {
			t.Error("foreign key was wrong value", a.RelatedID, x.ID)
		}
	}
}
func testAttachtmentToOneSetOpSiteUsingSite(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attachtment
	var b, c Site

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attachtmentDBTypes, false, strmangle.SetComplement(attachtmentPrimaryKeyColumns, attachtmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, siteDBTypes, false, strmangle.SetComplement(sitePrimaryKeyColumns, siteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, siteDBTypes, false, strmangle.SetComplement(sitePrimaryKeyColumns, siteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Site{&b, &c} {
		err = a.SetSite(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Site != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Attachtments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SiteID != x.ID {
			t.Error("foreign key was wrong value", a.SiteID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SiteID))
		reflect.Indirect(reflect.ValueOf(&a.SiteID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SiteID != x.ID {
			t.Error("foreign key was wrong value", a.SiteID, x.ID)
		}
	}
}

func testAttachtmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttachtmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttachtmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttachtmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attachtments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attachtmentDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `SiteID`: `integer`, `RelatedID`: `integer`, `URL`: `text`}
	_                  = bytes.MinRead
)

func testAttachtmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attachtmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attachtmentAllColumns) == len(attachtmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttachtmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attachtmentAllColumns) == len(attachtmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attachtment{}
	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attachtmentDBTypes, true, attachtmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attachtmentAllColumns, attachtmentPrimaryKeyColumns) {
		fields = attachtmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			attachtmentAllColumns,
			attachtmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttachtmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttachtmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(attachtmentAllColumns) == len(attachtmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Attachtment{}
	if err = randomize.Struct(seed, &o, attachtmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attachtment: %s", err)
	}

	count, err := Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attachtmentDBTypes, false, attachtmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attachtment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attachtment: %s", err)
	}

	count, err = Attachtments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
