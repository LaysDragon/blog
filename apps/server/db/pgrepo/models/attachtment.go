// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Attachtment is an object representing the database table.
type Attachtment struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedDate null.Time `boil:"created_date" json:"created_date,omitempty" toml:"created_date" yaml:"created_date,omitempty"`
	UpdatedDate null.Time `boil:"updated_date" json:"updated_date,omitempty" toml:"updated_date" yaml:"updated_date,omitempty"`
	OwnerID     int       `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	RelatedID   int       `boil:"related_id" json:"related_id" toml:"related_id" yaml:"related_id"`
	URL         string    `boil:"url" json:"url" toml:"url" yaml:"url"`

	R *attachtmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attachtmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttachtmentColumns = struct {
	ID          string
	CreatedDate string
	UpdatedDate string
	OwnerID     string
	RelatedID   string
	URL         string
}{
	ID:          "id",
	CreatedDate: "created_date",
	UpdatedDate: "updated_date",
	OwnerID:     "owner_id",
	RelatedID:   "related_id",
	URL:         "url",
}

var AttachtmentTableColumns = struct {
	ID          string
	CreatedDate string
	UpdatedDate string
	OwnerID     string
	RelatedID   string
	URL         string
}{
	ID:          "attachtment.id",
	CreatedDate: "attachtment.created_date",
	UpdatedDate: "attachtment.updated_date",
	OwnerID:     "attachtment.owner_id",
	RelatedID:   "attachtment.related_id",
	URL:         "attachtment.url",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AttachtmentWhere = struct {
	ID          whereHelperint
	CreatedDate whereHelpernull_Time
	UpdatedDate whereHelpernull_Time
	OwnerID     whereHelperint
	RelatedID   whereHelperint
	URL         whereHelperstring
}{
	ID:          whereHelperint{field: "\"attachtment\".\"id\""},
	CreatedDate: whereHelpernull_Time{field: "\"attachtment\".\"created_date\""},
	UpdatedDate: whereHelpernull_Time{field: "\"attachtment\".\"updated_date\""},
	OwnerID:     whereHelperint{field: "\"attachtment\".\"owner_id\""},
	RelatedID:   whereHelperint{field: "\"attachtment\".\"related_id\""},
	URL:         whereHelperstring{field: "\"attachtment\".\"url\""},
}

// AttachtmentRels is where relationship names are stored.
var AttachtmentRels = struct {
	Owner   string
	Related string
}{
	Owner:   "Owner",
	Related: "Related",
}

// attachtmentR is where relationships are stored.
type attachtmentR struct {
	Owner   *Account `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Related *Post    `boil:"Related" json:"Related" toml:"Related" yaml:"Related"`
}

// NewStruct creates a new relationship struct
func (*attachtmentR) NewStruct() *attachtmentR {
	return &attachtmentR{}
}

func (o *Attachtment) GetOwner() *Account {
	if o == nil {
		return nil
	}

	return o.R.GetOwner()
}

func (r *attachtmentR) GetOwner() *Account {
	if r == nil {
		return nil
	}

	return r.Owner
}

func (o *Attachtment) GetRelated() *Post {
	if o == nil {
		return nil
	}

	return o.R.GetRelated()
}

func (r *attachtmentR) GetRelated() *Post {
	if r == nil {
		return nil
	}

	return r.Related
}

// attachtmentL is where Load methods for each relationship are stored.
type attachtmentL struct{}

var (
	attachtmentAllColumns            = []string{"id", "created_date", "updated_date", "owner_id", "related_id", "url"}
	attachtmentColumnsWithoutDefault = []string{"owner_id", "related_id", "url"}
	attachtmentColumnsWithDefault    = []string{"id", "created_date", "updated_date"}
	attachtmentPrimaryKeyColumns     = []string{"id"}
	attachtmentGeneratedColumns      = []string{}
)

type (
	// AttachtmentSlice is an alias for a slice of pointers to Attachtment.
	// This should almost always be used instead of []Attachtment.
	AttachtmentSlice []*Attachtment
	// AttachtmentHook is the signature for custom Attachtment hook methods
	AttachtmentHook func(context.Context, boil.ContextExecutor, *Attachtment) error

	attachtmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attachtmentType                 = reflect.TypeOf(&Attachtment{})
	attachtmentMapping              = queries.MakeStructMapping(attachtmentType)
	attachtmentPrimaryKeyMapping, _ = queries.BindMapping(attachtmentType, attachtmentMapping, attachtmentPrimaryKeyColumns)
	attachtmentInsertCacheMut       sync.RWMutex
	attachtmentInsertCache          = make(map[string]insertCache)
	attachtmentUpdateCacheMut       sync.RWMutex
	attachtmentUpdateCache          = make(map[string]updateCache)
	attachtmentUpsertCacheMut       sync.RWMutex
	attachtmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var attachtmentAfterSelectMu sync.Mutex
var attachtmentAfterSelectHooks []AttachtmentHook

var attachtmentBeforeInsertMu sync.Mutex
var attachtmentBeforeInsertHooks []AttachtmentHook
var attachtmentAfterInsertMu sync.Mutex
var attachtmentAfterInsertHooks []AttachtmentHook

var attachtmentBeforeUpdateMu sync.Mutex
var attachtmentBeforeUpdateHooks []AttachtmentHook
var attachtmentAfterUpdateMu sync.Mutex
var attachtmentAfterUpdateHooks []AttachtmentHook

var attachtmentBeforeDeleteMu sync.Mutex
var attachtmentBeforeDeleteHooks []AttachtmentHook
var attachtmentAfterDeleteMu sync.Mutex
var attachtmentAfterDeleteHooks []AttachtmentHook

var attachtmentBeforeUpsertMu sync.Mutex
var attachtmentBeforeUpsertHooks []AttachtmentHook
var attachtmentAfterUpsertMu sync.Mutex
var attachtmentAfterUpsertHooks []AttachtmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Attachtment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attachtmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Attachtment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attachtmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Attachtment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attachtmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Attachtment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attachtmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Attachtment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attachtmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Attachtment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attachtmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Attachtment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attachtmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Attachtment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attachtmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Attachtment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attachtmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttachtmentHook registers your hook function for all future operations.
func AddAttachtmentHook(hookPoint boil.HookPoint, attachtmentHook AttachtmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		attachtmentAfterSelectMu.Lock()
		attachtmentAfterSelectHooks = append(attachtmentAfterSelectHooks, attachtmentHook)
		attachtmentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		attachtmentBeforeInsertMu.Lock()
		attachtmentBeforeInsertHooks = append(attachtmentBeforeInsertHooks, attachtmentHook)
		attachtmentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		attachtmentAfterInsertMu.Lock()
		attachtmentAfterInsertHooks = append(attachtmentAfterInsertHooks, attachtmentHook)
		attachtmentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		attachtmentBeforeUpdateMu.Lock()
		attachtmentBeforeUpdateHooks = append(attachtmentBeforeUpdateHooks, attachtmentHook)
		attachtmentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		attachtmentAfterUpdateMu.Lock()
		attachtmentAfterUpdateHooks = append(attachtmentAfterUpdateHooks, attachtmentHook)
		attachtmentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		attachtmentBeforeDeleteMu.Lock()
		attachtmentBeforeDeleteHooks = append(attachtmentBeforeDeleteHooks, attachtmentHook)
		attachtmentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		attachtmentAfterDeleteMu.Lock()
		attachtmentAfterDeleteHooks = append(attachtmentAfterDeleteHooks, attachtmentHook)
		attachtmentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		attachtmentBeforeUpsertMu.Lock()
		attachtmentBeforeUpsertHooks = append(attachtmentBeforeUpsertHooks, attachtmentHook)
		attachtmentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		attachtmentAfterUpsertMu.Lock()
		attachtmentAfterUpsertHooks = append(attachtmentAfterUpsertHooks, attachtmentHook)
		attachtmentAfterUpsertMu.Unlock()
	}
}

// One returns a single attachtment record from the query.
func (q attachtmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Attachtment, error) {
	o := &Attachtment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for attachtment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Attachtment records from the query.
func (q attachtmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (AttachtmentSlice, error) {
	var o []*Attachtment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Attachtment slice")
	}

	if len(attachtmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Attachtment records in the query.
func (q attachtmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count attachtment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attachtmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if attachtment exists")
	}

	return count > 0, nil
}

// Owner pointed to by the foreign key.
func (o *Attachtment) Owner(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// Related pointed to by the foreign key.
func (o *Attachtment) Related(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedID),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attachtmentL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttachtment interface{}, mods queries.Applicator) error {
	var slice []*Attachtment
	var object *Attachtment

	if singular {
		var ok bool
		object, ok = maybeAttachtment.(*Attachtment)
		if !ok {
			object = new(Attachtment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttachtment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttachtment))
			}
		}
	} else {
		s, ok := maybeAttachtment.(*[]*Attachtment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttachtment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttachtment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &attachtmentR{}
		}
		args[object.OwnerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attachtmentR{}
			}

			args[obj.OwnerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.OwnerAttachtments = append(foreign.R.OwnerAttachtments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.OwnerAttachtments = append(foreign.R.OwnerAttachtments, local)
				break
			}
		}
	}

	return nil
}

// LoadRelated allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attachtmentL) LoadRelated(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttachtment interface{}, mods queries.Applicator) error {
	var slice []*Attachtment
	var object *Attachtment

	if singular {
		var ok bool
		object, ok = maybeAttachtment.(*Attachtment)
		if !ok {
			object = new(Attachtment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttachtment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttachtment))
			}
		}
	} else {
		s, ok := maybeAttachtment.(*[]*Attachtment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttachtment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttachtment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &attachtmentR{}
		}
		args[object.RelatedID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attachtmentR{}
			}

			args[obj.RelatedID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`post`),
		qm.WhereIn(`post.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for post")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Related = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.RelatedAttachtments = append(foreign.R.RelatedAttachtments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RelatedID == foreign.ID {
				local.R.Related = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.RelatedAttachtments = append(foreign.R.RelatedAttachtments, local)
				break
			}
		}
	}

	return nil
}

// SetOwner of the attachtment to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerAttachtments.
func (o *Attachtment) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attachtment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, attachtmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &attachtmentR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &accountR{
			OwnerAttachtments: AttachtmentSlice{o},
		}
	} else {
		related.R.OwnerAttachtments = append(related.R.OwnerAttachtments, o)
	}

	return nil
}

// SetRelated of the attachtment to the related item.
// Sets o.R.Related to related.
// Adds o to related.R.RelatedAttachtments.
func (o *Attachtment) SetRelated(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attachtment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_id"}),
		strmangle.WhereClause("\"", "\"", 2, attachtmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RelatedID = related.ID
	if o.R == nil {
		o.R = &attachtmentR{
			Related: related,
		}
	} else {
		o.R.Related = related
	}

	if related.R == nil {
		related.R = &postR{
			RelatedAttachtments: AttachtmentSlice{o},
		}
	} else {
		related.R.RelatedAttachtments = append(related.R.RelatedAttachtments, o)
	}

	return nil
}

// Attachtments retrieves all the records using an executor.
func Attachtments(mods ...qm.QueryMod) attachtmentQuery {
	mods = append(mods, qm.From("\"attachtment\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attachtment\".*"})
	}

	return attachtmentQuery{q}
}

// FindAttachtment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttachtment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Attachtment, error) {
	attachtmentObj := &Attachtment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attachtment\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, attachtmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from attachtment")
	}

	if err = attachtmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return attachtmentObj, err
	}

	return attachtmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Attachtment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attachtment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attachtmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attachtmentInsertCacheMut.RLock()
	cache, cached := attachtmentInsertCache[key]
	attachtmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attachtmentAllColumns,
			attachtmentColumnsWithDefault,
			attachtmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attachtmentType, attachtmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attachtmentType, attachtmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attachtment\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attachtment\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into attachtment")
	}

	if !cached {
		attachtmentInsertCacheMut.Lock()
		attachtmentInsertCache[key] = cache
		attachtmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Attachtment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Attachtment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attachtmentUpdateCacheMut.RLock()
	cache, cached := attachtmentUpdateCache[key]
	attachtmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attachtmentAllColumns,
			attachtmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update attachtment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attachtment\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attachtmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attachtmentType, attachtmentMapping, append(wl, attachtmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update attachtment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for attachtment")
	}

	if !cached {
		attachtmentUpdateCacheMut.Lock()
		attachtmentUpdateCache[key] = cache
		attachtmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q attachtmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for attachtment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for attachtment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttachtmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attachtmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attachtment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attachtmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in attachtment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all attachtment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Attachtment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no attachtment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attachtmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attachtmentUpsertCacheMut.RLock()
	cache, cached := attachtmentUpsertCache[key]
	attachtmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			attachtmentAllColumns,
			attachtmentColumnsWithDefault,
			attachtmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attachtmentAllColumns,
			attachtmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert attachtment, could not build update column list")
		}

		ret := strmangle.SetComplement(attachtmentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(attachtmentPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert attachtment, could not build conflict column list")
			}

			conflict = make([]string, len(attachtmentPrimaryKeyColumns))
			copy(conflict, attachtmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attachtment\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(attachtmentType, attachtmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attachtmentType, attachtmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert attachtment")
	}

	if !cached {
		attachtmentUpsertCacheMut.Lock()
		attachtmentUpsertCache[key] = cache
		attachtmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Attachtment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Attachtment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Attachtment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attachtmentPrimaryKeyMapping)
	sql := "DELETE FROM \"attachtment\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from attachtment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for attachtment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attachtmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no attachtmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attachtment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attachtment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttachtmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(attachtmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attachtmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attachtment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attachtmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attachtment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attachtment")
	}

	if len(attachtmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Attachtment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAttachtment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttachtmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttachtmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attachtmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attachtment\".* FROM \"attachtment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attachtmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AttachtmentSlice")
	}

	*o = slice

	return nil
}

// AttachtmentExists checks if the Attachtment row exists.
func AttachtmentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attachtment\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if attachtment exists")
	}

	return exists, nil
}

// Exists checks if the Attachtment row exists.
func (o *Attachtment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AttachtmentExists(ctx, exec, o.ID)
}
