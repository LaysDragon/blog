// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSiteRoles(t *testing.T) {
	t.Parallel()

	query := SiteRoles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSiteRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSiteRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SiteRoles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSiteRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SiteRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSiteRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SiteRoleExists(ctx, tx, o.AccountID, o.SiteID)
	if err != nil {
		t.Errorf("Unable to check if SiteRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SiteRoleExists to return true, but got false.")
	}
}

func testSiteRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	siteRoleFound, err := FindSiteRole(ctx, tx, o.AccountID, o.SiteID)
	if err != nil {
		t.Error(err)
	}

	if siteRoleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSiteRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SiteRoles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSiteRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SiteRoles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSiteRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	siteRoleOne := &SiteRole{}
	siteRoleTwo := &SiteRole{}
	if err = randomize.Struct(seed, siteRoleOne, siteRoleDBTypes, false, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}
	if err = randomize.Struct(seed, siteRoleTwo, siteRoleDBTypes, false, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = siteRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = siteRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SiteRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSiteRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	siteRoleOne := &SiteRole{}
	siteRoleTwo := &SiteRole{}
	if err = randomize.Struct(seed, siteRoleOne, siteRoleDBTypes, false, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}
	if err = randomize.Struct(seed, siteRoleTwo, siteRoleDBTypes, false, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = siteRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = siteRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func siteRoleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SiteRole) error {
	*o = SiteRole{}
	return nil
}

func siteRoleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SiteRole) error {
	*o = SiteRole{}
	return nil
}

func siteRoleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SiteRole) error {
	*o = SiteRole{}
	return nil
}

func siteRoleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SiteRole) error {
	*o = SiteRole{}
	return nil
}

func siteRoleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SiteRole) error {
	*o = SiteRole{}
	return nil
}

func siteRoleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SiteRole) error {
	*o = SiteRole{}
	return nil
}

func siteRoleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SiteRole) error {
	*o = SiteRole{}
	return nil
}

func siteRoleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SiteRole) error {
	*o = SiteRole{}
	return nil
}

func siteRoleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SiteRole) error {
	*o = SiteRole{}
	return nil
}

func testSiteRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SiteRole{}
	o := &SiteRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, siteRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SiteRole object: %s", err)
	}

	AddSiteRoleHook(boil.BeforeInsertHook, siteRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	siteRoleBeforeInsertHooks = []SiteRoleHook{}

	AddSiteRoleHook(boil.AfterInsertHook, siteRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	siteRoleAfterInsertHooks = []SiteRoleHook{}

	AddSiteRoleHook(boil.AfterSelectHook, siteRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	siteRoleAfterSelectHooks = []SiteRoleHook{}

	AddSiteRoleHook(boil.BeforeUpdateHook, siteRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	siteRoleBeforeUpdateHooks = []SiteRoleHook{}

	AddSiteRoleHook(boil.AfterUpdateHook, siteRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	siteRoleAfterUpdateHooks = []SiteRoleHook{}

	AddSiteRoleHook(boil.BeforeDeleteHook, siteRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	siteRoleBeforeDeleteHooks = []SiteRoleHook{}

	AddSiteRoleHook(boil.AfterDeleteHook, siteRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	siteRoleAfterDeleteHooks = []SiteRoleHook{}

	AddSiteRoleHook(boil.BeforeUpsertHook, siteRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	siteRoleBeforeUpsertHooks = []SiteRoleHook{}

	AddSiteRoleHook(boil.AfterUpsertHook, siteRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	siteRoleAfterUpsertHooks = []SiteRoleHook{}
}

func testSiteRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSiteRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(siteRolePrimaryKeyColumns, siteRoleColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSiteRoleToOneAccountUsingAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SiteRole
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, siteRoleDBTypes, false, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AccountID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Account().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAccountHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Account) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SiteRoleSlice{&local}
	if err = local.L.LoadAccount(ctx, tx, false, (*[]*SiteRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Account = nil
	if err = local.L.LoadAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSiteRoleToOneSiteUsingSite(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SiteRole
	var foreign Site

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, siteRoleDBTypes, false, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SiteID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Site().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddSiteHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Site) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SiteRoleSlice{&local}
	if err = local.L.LoadSite(ctx, tx, false, (*[]*SiteRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Site == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Site = nil
	if err = local.L.LoadSite(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Site == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSiteRoleToOneSetOpAccountUsingAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SiteRole
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, siteRoleDBTypes, false, strmangle.SetComplement(siteRolePrimaryKeyColumns, siteRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Account != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SiteRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AccountID != x.ID {
			t.Error("foreign key was wrong value", a.AccountID)
		}

		if exists, err := SiteRoleExists(ctx, tx, a.AccountID, a.SiteID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testSiteRoleToOneSetOpSiteUsingSite(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SiteRole
	var b, c Site

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, siteRoleDBTypes, false, strmangle.SetComplement(siteRolePrimaryKeyColumns, siteRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, siteDBTypes, false, strmangle.SetComplement(sitePrimaryKeyColumns, siteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, siteDBTypes, false, strmangle.SetComplement(sitePrimaryKeyColumns, siteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Site{&b, &c} {
		err = a.SetSite(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Site != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SiteRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SiteID != x.ID {
			t.Error("foreign key was wrong value", a.SiteID)
		}

		if exists, err := SiteRoleExists(ctx, tx, a.AccountID, a.SiteID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testSiteRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSiteRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SiteRoleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSiteRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SiteRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	siteRoleDBTypes = map[string]string{`AccountID`: `integer`, `SiteID`: `integer`, `Role`: `character varying`}
	_               = bytes.MinRead
)

func testSiteRolesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(siteRolePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(siteRoleAllColumns) == len(siteRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSiteRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(siteRoleAllColumns) == len(siteRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SiteRole{}
	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, siteRoleDBTypes, true, siteRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(siteRoleAllColumns, siteRolePrimaryKeyColumns) {
		fields = siteRoleAllColumns
	} else {
		fields = strmangle.SetComplement(
			siteRoleAllColumns,
			siteRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SiteRoleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSiteRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(siteRoleAllColumns) == len(siteRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SiteRole{}
	if err = randomize.Struct(seed, &o, siteRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SiteRole: %s", err)
	}

	count, err := SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, siteRoleDBTypes, false, siteRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SiteRole struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SiteRole: %s", err)
	}

	count, err = SiteRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
